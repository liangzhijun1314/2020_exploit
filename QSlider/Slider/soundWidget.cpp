#include "soundWidget.h"
#include "customslider.h"
#define  SLIDER_MIN_VALUE -60
#define  SLIDER_MAX_VALUE 20

SoundWidget::SoundWidget(QWidget *parent)
	: QWidget(parent)
{
	initUI();
	initLayout();
}

SoundWidget::~SoundWidget()
{

}

void SoundWidget::initUI()
{
	m_bt_sound = new QPushButton(QIcon(":/images/sound"), "", this);
	m_bt_sound->setFixedSize(20, 20);
    m_slider = new CustomSlider(this);
	m_slider->setOrientation(Qt::Horizontal);
	m_slider->setRange(SLIDER_MIN_VALUE, SLIDER_MAX_VALUE);
    //m_slider->setSingleStep(1);
	m_slider->installEventFilter(this);
	m_lb_db = new QLabel(this);
	m_lb_db->setFixedWidth(30);
	m_lb_db->setAlignment(Qt::AlignLeft | Qt::AlignVCenter);
	m_is_mute = false;
	connect(m_bt_sound, SIGNAL(clicked(bool)), this, SLOT(slot_sound_clicked()));
	connect(m_slider, SIGNAL(valueChanged(int)), this, SLOT(slot_slider_valueChanged(int)));
    //connect(m_slider,SIGNAL(sliderClicked),this,SLOT(slot_slider_clicked()));
}

void SoundWidget::initLayout()
{
	QHBoxLayout * slider_layout = new QHBoxLayout;
	slider_layout->addWidget(m_bt_sound,0);
	slider_layout->addSpacing(1);
	slider_layout->addWidget(m_slider,1);
	slider_layout->addSpacing(1);
	slider_layout->addWidget(m_lb_db,0);
	slider_layout->setMargin(0);
	this->setLayout(slider_layout);
}

void SoundWidget::setBtnState(int value)
{
	if(value == SLIDER_MIN_VALUE)
	{
		m_bt_sound->setStyleSheet("QPushButton{image:url(:/images/mute)}"
			"QPushButton::hover{ image:url(:/images/mute_hover)}");
	}
	else
	{
		m_bt_sound->setStyleSheet("QPushButton{image:url(:/images/sound)}"
			"QPushButton::hover{ image:url(:/images/sound_hover)}");
	}
}

void SoundWidget::setMute(bool is_mute)
{
	m_is_mute = is_mute;
	if (is_mute)
	{
		m_bt_sound->setStyleSheet("QPushButton{image:url(:/images/mute)}"
			"QPushButton::hover{ image:url(:/images/mute_hover)}");
	}
	else
	{
		m_bt_sound->setStyleSheet("QPushButton{image:url(:/images/sound)}"
			"QPushButton::hover{ image:url(:/images/sound_hover)}");
	}

	emit soundClicked(m_is_mute);
}

bool SoundWidget::isMute()
{
	return m_is_mute;
}

void SoundWidget::setValue(int value)
{
	m_slider->setValue(value);
	m_lb_db->setText(QString::number(value) + "db");
}

int SoundWidget::getValue()
{
	return m_slider->value();
}

//bool SoundWidget::eventFilter(QObject * obj, QEvent * event)
//{
//	if (obj == m_slider)
//	{
//		if (event->type() == QEvent::MouseButtonRelease)           //判断类型
//		{
//			QMouseEvent *mouseEvent = static_cast<QMouseEvent *>(event);
//			if (mouseEvent->button() == Qt::LeftButton && m_slider->isEnabled()) //判断左键
//			{
//				int dur = m_slider->maximum() - m_slider->minimum();
//				int pos = m_slider->minimum() + dur * ((double)mouseEvent->x() / m_slider->width());
//				if (pos != m_slider->sliderPosition())
//				{
//                    qDebug() << "pos = " << pos;
//					m_slider->setValue(pos);
//				}
//			}
//		}
//	}
//    return QObject::eventFilter(obj, event);
//}


void SoundWidget::slot_slider_valueChanged(int value)
{
    qDebug() << "slot_slider_valueChanged value = " << value;
	setBtnState(value);
	m_lb_db->setText(QString::number(value) + "db");
	emit valueChanged(value);
}

void SoundWidget::slot_sound_clicked()
{
	m_is_mute = !m_is_mute;
	setMute(m_is_mute);
    emit soundClicked(m_is_mute);
}

void SoundWidget::slot_slider_clicked()
{

}
